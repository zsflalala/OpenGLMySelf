#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <iostream>
#include "shader.h"

// 窗口大小
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);
void RenderQuad(CShader& vShader);
void RenderScene(CShader& vShader);

int main()
{
    // 初始化GLFW
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    // 创建窗口
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Deferred Rendering", NULL, NULL);
    if (window == NULL)
    {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // 初始化GLAD
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cerr << "Failed to initialize GLAD" << std::endl;
        return -1;
    }
    
    // 设置G-Buffer
    unsigned int gBuffer;
    glGenFramebuffers(1, &gBuffer);
    glBindFramebuffer(GL_FRAMEBUFFER, gBuffer);

    // 位置颜色缓冲
    unsigned int gPosition;
    glGenTextures(1, &gPosition);
    glBindTexture(GL_TEXTURE_2D, gPosition);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB16F, SCR_WIDTH, SCR_HEIGHT, 0, GL_RGB, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, gPosition, 0);

    // 法线颜色缓冲
    unsigned int gNormal;
    glGenTextures(1, &gNormal);
    glBindTexture(GL_TEXTURE_2D, gNormal);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB16F, SCR_WIDTH, SCR_HEIGHT, 0, GL_RGB, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, GL_TEXTURE_2D, gNormal, 0);

    // 告诉OpenGL我们将使用哪种颜色附件进行渲染
    unsigned int attachments[2] = { GL_COLOR_ATTACHMENT0, GL_COLOR_ATTACHMENT1 };
    glDrawBuffers(2, attachments);

    // 深度纹理
    unsigned int gDepth;
    glGenTextures(1, &gDepth);
    glBindTexture(GL_TEXTURE_2D, gDepth);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT, SCR_WIDTH, SCR_HEIGHT, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, gDepth, 0);

    if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
    {
        std::cerr << "Framebuffer not complete!" << std::endl;
    }
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    GLuint screenTex;
    glCreateTextures(GL_TEXTURE_2D, 1, &screenTex);
    glTextureParameteri(screenTex, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTextureParameteri(screenTex, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTextureParameteri(screenTex, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTextureParameteri(screenTex, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTextureStorage2D(screenTex, 1, GL_RGBA32F, SCR_WIDTH, SCR_HEIGHT);
    glBindImageTexture(0, screenTex, 0, GL_FALSE, 0, GL_WRITE_ONLY, GL_RGBA32F);

    /*glGenTextures(1, &screenTex);
    glBindTexture(GL_TEXTURE_2D, screenTex);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, SCR_WIDTH, SCR_HEIGHT, 0, GL_RGBA, GL_FLOAT, NULL);
    glBindImageTexture(0, screenTex, 0, GL_FALSE, 0, GL_WRITE_ONLY, GL_RGBA32F);*/

    GLuint screenTexPos;
    glCreateTextures(GL_TEXTURE_2D, 1, &screenTexPos);
    glTextureParameteri(screenTexPos, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTextureParameteri(screenTexPos, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTextureParameteri(screenTexPos, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTextureParameteri(screenTexPos, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTextureStorage2D(screenTexPos, 1, GL_RGBA32F, SCR_WIDTH, SCR_HEIGHT);
    glBindImageTexture(1, screenTexPos, 0, GL_FALSE, 0, GL_WRITE_ONLY, GL_RGBA32F);

    CShader GeometryShader("./shaders/gbuffer.vs", "./shaders/gbuffer.fs");
    CShader ComputeShader("./shaders/compute.cs");
    CShader QuadShader("./shaders/quadshader.vs", "./shaders/quadshader.fs");

    // 主循环
    while (!glfwWindowShouldClose(window))
    {
        // 输入处理
        processInput(window);

        // 几何处理阶段
        glEnable(GL_DEPTH_TEST);
        glBindFramebuffer(GL_FRAMEBUFFER, gBuffer);
        glViewport(0, 0, SCR_WIDTH, SCR_HEIGHT);
        glClearColor(0.3f, 0.3f, 0.3f, 0.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        GeometryShader.use();
        RenderScene(GeometryShader);

        ComputeShader.use();
        glBindTextureUnit(0, gPosition);
        glBindTextureUnit(1, gNormal);
        ComputeShader.setInt("gPosition", 0);
        ComputeShader.setInt("gNormal", 1);
        glm::vec3 CameraPos = glm::vec3(0.0f, 0.0f, -3.0f);
        glm::vec3 CameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
        glm::vec3 CameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
        glm::mat4 ViewMat = glm::lookAt(CameraPos, CameraPos + CameraFront, CameraUp);
        ComputeShader.setMat4("viewPos", ViewMat);
        glDispatchCompute(ceil(SCR_WIDTH / 8), ceil(SCR_HEIGHT / 4), 1);
        glMemoryBarrier(GL_ALL_BARRIER_BITS);

        // 光照处理阶段
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glDisable(GL_DEPTH_TEST);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        QuadShader.use();
        glBindTextureUnit(2, screenTex);
        QuadShader.setInt("gScreen", 2);
        glBindTextureUnit(3, screenTexPos);
        QuadShader.setInt("gScreen2", 3);
        RenderQuad(QuadShader);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // 清理资源
    glDeleteFramebuffers(1, &gBuffer);
    glDeleteTextures(1, &gPosition);
    glDeleteTextures(1, &gNormal);
    glDeleteTextures(1, &gDepth);

    glfwTerminate();
    return 0;
}

// 处理输入
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

// 当窗口大小改变时调用
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

// 渲染覆盖屏幕的四边形
unsigned int quadVAO = 0;
unsigned int quadVBO, quadEBO;
void RenderQuad(CShader& vShader)
{
    if (quadVAO == 0)
    {
        GLfloat vertices[] =
        {
            -1.0f, -1.0f , 0.0f, 0.0f, 0.0f,
            -1.0f,  1.0f , 0.0f, 0.0f, 1.0f,
             1.0f,  1.0f , 0.0f, 1.0f, 1.0f,
             1.0f, -1.0f , 0.0f, 1.0f, 0.0f,
        };

        GLuint indices[] =
        {
            0, 2, 1,
            0, 3, 2
        };
        glCreateVertexArrays(1, &quadVAO);
        glCreateBuffers(1, &quadVBO);
        glCreateBuffers(1, &quadEBO);

        glNamedBufferData(quadVBO, sizeof(vertices), vertices, GL_STATIC_DRAW);
        glNamedBufferData(quadEBO, sizeof(indices), indices, GL_STATIC_DRAW);

        glEnableVertexArrayAttrib(quadVAO, 0);
        glVertexArrayAttribBinding(quadVAO, 0, 0);
        glVertexArrayAttribFormat(quadVAO, 0, 3, GL_FLOAT, GL_FALSE, 0);

        glEnableVertexArrayAttrib(quadVAO, 1);
        glVertexArrayAttribBinding(quadVAO, 1, 0);
        glVertexArrayAttribFormat(quadVAO, 1, 2, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat));

        glVertexArrayVertexBuffer(quadVAO, 0, quadVBO, 0, 5 * sizeof(GLfloat));
        glVertexArrayElementBuffer(quadVAO, quadEBO);
    }
    glBindVertexArray(quadVAO);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
    glBindVertexArray(0);
}

unsigned int TriangleVAO = 0;
unsigned int TriangleVBO;
void RenderScene(CShader& vShader)
{
    if (TriangleVAO == 0)
    {
        float vertices[] = {
            // 位置           // 法线
            0.0f,  0.5f, 0.0f,  0.0f,  0.0f,  1.0f,
           -0.5f, -0.5f, 0.0f,  0.0f,  0.0f,  1.0f,
            0.5f, -0.5f, 0.0f,  0.0f,  0.0f,  1.0f,
        };

        glGenVertexArrays(1, &TriangleVAO);
        glBindVertexArray(TriangleVAO);

        glGenBuffers(1, &TriangleVBO);
        glBindBuffer(GL_ARRAY_BUFFER, TriangleVBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

        // Position attribute
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(0);
        // Normal attribute
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
        glEnableVertexAttribArray(1);
    }

    glm::vec3 CameraPos = glm::vec3(0.0f, 0.0f, -2.0f);
    glm::vec3 CameraFront = glm::vec3(0.0f, 0.0f, 1.0f);
    glm::vec3 CameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
    glm::mat4 ProjectionMat = glm::perspective(glm::radians(45.0f), (GLfloat)SCR_WIDTH / (GLfloat)SCR_HEIGHT, 0.1f, 100.0f);
    glm::mat4 ViewMat = glm::lookAt(CameraPos, CameraPos + CameraFront, CameraUp);
    vShader.setMat4("projection", ProjectionMat);
    vShader.setMat4("view", ViewMat);
    glm::mat4 Model = glm::mat4(1.0f);
    vShader.setMat4("model", Model);

    glBindVertexArray(TriangleVAO);
    glDrawArrays(GL_TRIANGLES, 0, 3);
    glBindVertexArray(0);
}