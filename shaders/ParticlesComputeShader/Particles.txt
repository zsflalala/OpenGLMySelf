#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <chrono>
#include <random>
#include <cstring>
#include <iostream>
#include "shader.h"

// 窗口大小
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

constexpr int PARTICLES_COUNT = 8192;

struct SParticle
{
    glm::vec2 _Position;
    glm::vec2 _Velocity;
    glm::vec4 _Color;
};

int main()
{
    // 初始化GLFW
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    // 创建窗口
    GLFWwindow* pWindow = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Particles", NULL, NULL);
    if (pWindow == NULL)
    {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(pWindow);

    // 初始化GLAD
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cerr << "Failed to initialize GLAD" << std::endl;
        return -1;
    }
    

    SParticle Particles[PARTICLES_COUNT];
    CShader ComputeShader("./shaders/particle.comp");
    CShader ParticleShader("./shaders/particle.vert", "./shaders/particle.frag");

    std::default_random_engine DefaultRndEngine(static_cast<unsigned>(time(nullptr)));
    std::uniform_real_distribution RndDist(0.0f, 1.0f);

    for (auto& [_Position, _Velocity, _Color] : Particles)
    {
        const float r = 0.25f * sqrt(RndDist(DefaultRndEngine));
        const float theta = RndDist(DefaultRndEngine) * 2.0f * 3.14159265358979323846f;
        const float x = r * cos(theta) * 800 / 600;
        const float y = r * sin(theta);
        _Position = glm::vec2(x, y);
        _Velocity = normalize(glm::vec2(x, y)) * 0.00025f;
        _Color = glm::vec4(RndDist(DefaultRndEngine), RndDist(DefaultRndEngine), RndDist(DefaultRndEngine), 1.0f);
    }

    GLint BindIndex = 0;
    const GLuint ubIndex = glGetUniformBlockIndex(ComputeShader.ID, "ParameterUBO");
    glUniformBlockBinding(ComputeShader.ID, ubIndex, BindIndex);

    GLint BufferSize = 0;
    GLuint ParticleUBO;
    glGetActiveUniformBlockiv(ComputeShader.ID, ubIndex, GL_UNIFORM_BLOCK_DATA_SIZE, &BufferSize);
    glGenBuffers(1, &ParticleUBO);
    glBindBuffer(GL_UNIFORM_BUFFER, ParticleUBO);
    glBufferData(GL_UNIFORM_BUFFER, BufferSize, nullptr, GL_DYNAMIC_READ);
    glBindBufferBase(GL_UNIFORM_BUFFER, 0, ParticleUBO);

    BindIndex = 1;
    GLuint ParticlesSSBO;
    glGenBuffers(1, &ParticlesSSBO);
    glBindBuffer(GL_SHADER_STORAGE_BUFFER, ParticlesSSBO);
    glBufferData(GL_SHADER_STORAGE_BUFFER, sizeof(Particles), &Particles, GL_DYNAMIC_COPY);
    glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 1, ParticlesSSBO);

    glBindBuffer(GL_SHADER_STORAGE_BUFFER, ParticlesSSBO);
    GLvoid* pMappedPtr = glMapBuffer(GL_SHADER_STORAGE_BUFFER, GL_WRITE_ONLY);
    memcpy(pMappedPtr, &Particles, sizeof(Particles));
    glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);

    ParticleShader.use();
    GLuint ParticleVAO, ParticleVBO;
    glGenVertexArrays(1, &ParticleVAO);
    glBindVertexArray(ParticleVAO);
    glBindBuffer(GL_ARRAY_BUFFER, ParticlesSSBO);
    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), static_cast<void*>(nullptr));
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 8 * sizeof(float), reinterpret_cast<void*>(4 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // timing
    float DeltaTime = 0.0f;
    float LastFrame = 0.0f;

    // 主循环
    while (!glfwWindowShouldClose(pWindow))
    {
        // 输入处理
        float CurrentFrame = static_cast<float>(glfwGetTime());
        DeltaTime = (CurrentFrame - LastFrame) * 1000.0;
        LastFrame = CurrentFrame;

        // 几何处理阶段
        glViewport(0, 0, SCR_WIDTH, SCR_HEIGHT);
        glClearColor(0.3f, 0.3f, 0.3f, 0.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        ComputeShader.use();
        glBindBuffer(GL_UNIFORM_BUFFER, ParticleUBO);
        glBufferSubData(GL_UNIFORM_BUFFER, 0, sizeof(float), &DeltaTime);

        glBindBuffer(GL_SHADER_STORAGE_BUFFER, ParticlesSSBO);
        glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 1, ParticlesSSBO);

        glDispatchCompute(PARTICLES_COUNT / 256 + (PARTICLES_COUNT % 256 > 0 ? 1 : 0), 1, 1);

        //这部分可以从GPU获取数据
        //glBindBuffer(GL_SHADER_STORAGE_BUFFER, ParticlesSSBO);
        //glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT);//隔断作用，为了让数据修改完成
        //pMappedPtr = glMapBuffer(GL_SHADER_STORAGE_BUFFER, GL_READ_ONLY); //获取着色器buffer块内存地址
        //memcpy(&Particles, pMappedPtr, sizeof(Particles));//拷贝buffer块数据到结构体
        //glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);		

        ParticleShader.use();
        glBindVertexArray(ParticleVAO);
        glBindBuffer(GL_ARRAY_BUFFER, ParticlesSSBO);
        glPointSize(3.0f);
        glDrawArrays(GL_POINTS, 0, PARTICLES_COUNT);

        glfwSwapBuffers(pWindow);
        glfwPollEvents();
    }

    // 清理资源
    glDeleteFramebuffers(1, &ParticleVAO);
    glDeleteBuffers(1, &ParticleVBO);
    glDeleteBuffers(1, &ParticleUBO);
    glDeleteBuffers(1, &ParticlesSSBO);

    glfwTerminate();
    return 0;
}