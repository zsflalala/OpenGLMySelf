#include <cassert>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <stb_image.h>
#include <string>
#include <tiny_gltf.h>
#include <vector>
#include <cmath>
#include <cstring>
#include "shader.h"
#include "camera.h"

void framebufferSizeCallback(GLFWwindow* vWindow, int vWidth, int vHeight);
void mouseCallback(GLFWwindow* vWindow, double vPosX, double vPosY);
void scrollCallback(GLFWwindow* vWindow, double vOffsetX, double vOffsetY);
void processInput(GLFWwindow* vWindow);
unsigned int loadTexture(const char* vPath);
unsigned int loadCubemap(std::vector<std::string> vFaces);
bool loadGLTF(const std::string& vFilename, tinygltf::Model& vModelGLTF);
void createIndiceBufferData(std::vector<unsigned int>& vIndices, const tinygltf::BufferView& vBufferView, const tinygltf::Buffer& vBuffer, const int& vComponentType);
void createVertexBufferData(std::vector<float>& vVertices, const tinygltf::Buffer& vBuffer, const int vIndex);
void createVerticeAndIndice(tinygltf::Model& vGLTFModel, std::vector<float>& vioVertices, std::vector<unsigned int>& vioIndices); 

const int TINYGLTF_MODE_DEFAULT = -1;
const int TINYGLTF_MODE_POINT = 0;
const int TINYGLTF_MODE_TRIANGLE = 4;
const int TINYGLTF_COMPONETTYPE_UNSHORT = 5123;
const int TINYGLTF_COMPONETTYPE_UNINT = 5125;

const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

CCamera Camera(glm::vec3(0.0f, 0.0f, 30.0f));

bool FirstMouse = true;
float Yaw = -90.0f;	// yaw is initialized to -90.0 degrees since a yaw of 0.0 results in a direction vector pointing to the right so we initially rotate a bit to the left.
float Pitch = 0.0f;
float LastX = 800.0f / 2.0;
float LastY = 600.0 / 2.0;
float Fov = 45.0f;

// timing
float DeltaTime = 0.0f;	// time between current frame and last frame
float LastFrame = 0.0f;

int main()
{
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 5);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow* pWindow = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
    if (pWindow == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(pWindow);
    glfwSetFramebufferSizeCallback(pWindow, framebufferSizeCallback);
    glfwSetCursorPosCallback(pWindow, mouseCallback);
    glfwSetScrollCallback(pWindow, scrollCallback);
    glfwSetInputMode(pWindow, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    float CubeVertices[] = {
        // positions          // texture Coords
        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,
         0.5f, -0.5f, -0.5f,  1.0f, 0.0f,
         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,

        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
         0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
         0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
        -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,
        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

        -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
        -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
        -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
         0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
         0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
         0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
         0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
         0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
        -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,

        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
         0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
         0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
        -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,
        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f
    };
    float SkyboxVertices[] = {
        // positions          
        -1.0f,  1.0f, -1.0f,
        -1.0f, -1.0f, -1.0f,
         1.0f, -1.0f, -1.0f,
         1.0f, -1.0f, -1.0f,
         1.0f,  1.0f, -1.0f,
        -1.0f,  1.0f, -1.0f,

        -1.0f, -1.0f,  1.0f,
        -1.0f, -1.0f, -1.0f,
        -1.0f,  1.0f, -1.0f,
        -1.0f,  1.0f, -1.0f,
        -1.0f,  1.0f,  1.0f,
        -1.0f, -1.0f,  1.0f,

         1.0f, -1.0f, -1.0f,
         1.0f, -1.0f,  1.0f,
         1.0f,  1.0f,  1.0f,
         1.0f,  1.0f,  1.0f,
         1.0f,  1.0f, -1.0f,
         1.0f, -1.0f, -1.0f,

        -1.0f, -1.0f,  1.0f,
        -1.0f,  1.0f,  1.0f,
         1.0f,  1.0f,  1.0f,
         1.0f,  1.0f,  1.0f,
         1.0f, -1.0f,  1.0f,
        -1.0f, -1.0f,  1.0f,

        -1.0f,  1.0f, -1.0f,
         1.0f,  1.0f, -1.0f,
         1.0f,  1.0f,  1.0f,
         1.0f,  1.0f,  1.0f,
        -1.0f,  1.0f,  1.0f,
        -1.0f,  1.0f, -1.0f,

        -1.0f, -1.0f, -1.0f,
        -1.0f, -1.0f,  1.0f,
         1.0f, -1.0f, -1.0f,
         1.0f, -1.0f, -1.0f,
        -1.0f, -1.0f,  1.0f,
         1.0f, -1.0f,  1.0f
    };

    // cube VAO
    unsigned int CubeVAO, CubeVBO;
    /*glGenVertexArrays(1, &CubeVAO);
    glGenBuffers(1, &CubeVBO);
    glBindVertexArray(CubeVAO);
    glBindBuffer(GL_ARRAY_BUFFER, CubeVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(CubeVertices), &CubeVertices, GL_STATIC_DRAW);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));*/
    
    glCreateVertexArrays(1, &CubeVAO);
    glCreateBuffers(1, &CubeVBO);
    //glNamedBufferData(CubeVBO, sizeof(CubeVertices), &CubeVertices, GL_STATIC_DRAW); // 这一行和下一行均可
    glNamedBufferStorage(CubeVBO, sizeof(CubeVertices), &CubeVertices, GL_DYNAMIC_STORAGE_BIT);
    glVertexArrayVertexBuffer(CubeVAO, 0, CubeVBO, 0, 5 * sizeof(float));
    glEnableVertexArrayAttrib(CubeVAO, 0);
    glEnableVertexArrayAttrib(CubeVAO, 1);
    glVertexArrayAttribFormat(CubeVAO, 0, 3, GL_FLOAT, GL_FALSE, (0 * sizeof(float)));
    glVertexArrayAttribFormat(CubeVAO, 1, 2, GL_FLOAT, GL_FALSE, (3 * sizeof(float)));
    glVertexArrayAttribBinding(CubeVAO, 0, 0);
    glVertexArrayAttribBinding(CubeVAO, 1, 0);

    // skybox VAO
    unsigned int SkyboxVAO, SkyboxVBO;
    /*glGenVertexArrays(1, &SkyboxVAO);
    glGenBuffers(1, &SkyboxVBO);
    glBindVertexArray(SkyboxVAO);
    glBindBuffer(GL_ARRAY_BUFFER, SkyboxVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(SkyboxVertices), &SkyboxVertices, GL_STATIC_DRAW);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);*/

    glCreateVertexArrays(1, &SkyboxVAO);
    glCreateBuffers(1, &SkyboxVBO);
    glNamedBufferStorage(SkyboxVBO, sizeof(SkyboxVertices), &SkyboxVertices, GL_DYNAMIC_STORAGE_BIT);
    glVertexArrayVertexBuffer(SkyboxVAO, 0, SkyboxVBO, 0, 3 * sizeof(float));
    glEnableVertexArrayAttrib(SkyboxVAO, 0);
    glVertexArrayAttribFormat(SkyboxVAO, 0, 3, GL_FLOAT, GL_FALSE, (0 * sizeof(float)));
    glVertexArrayAttribBinding(SkyboxVAO, 0, 0);

    unsigned int CubeTexture = loadTexture("./textures/container.jpg");

    std::vector<std::string> Faces
    {
        "./textures/skybox/right.jpg",
        "./textures/skybox/left.jpg",
        "./textures/skybox/top.jpg",
        "./textures/skybox/bottom.jpg",
        "./textures/skybox/front.jpg",
        "./textures/skybox/back.jpg"
    };
    unsigned int CubemapTexture = loadCubemap(Faces);

    CShader CubeShader("./shaders/cubemaps.vs", "./shaders/cubemaps.fs");
    CShader SkyboxShader("./shaders/skybox.vs", "./shaders/skybox.fs");

    CubeShader.use();
    CubeShader.setInt("texture1", 0);

    SkyboxShader.use();
    SkyboxShader.setInt("skybox", 0);

    while (!glfwWindowShouldClose(pWindow))
    {
        float CurrentFrame = static_cast<float>(glfwGetTime());
        DeltaTime = CurrentFrame - LastFrame;
        LastFrame = CurrentFrame;
        processInput(pWindow);

        glEnable(GL_DEPTH_TEST);
        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        CubeShader.use();
        glm::mat4 Model = glm::mat4(1.0f);
        glm::mat4 View = Camera.GetViewMatrix();
        glm::mat4 Projection = glm::perspective(glm::radians(Camera.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
        CubeShader.setMat4("model", Model);
        CubeShader.setMat4("view", View);
        CubeShader.setMat4("projection", Projection);
        glBindVertexArray(CubeVAO);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, CubeTexture);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);

        glDepthFunc(GL_LEQUAL);  // change depth function so depth test passes when values are equal to depth buffer's content
        SkyboxShader.use();
        View = glm::mat4(glm::mat3(Camera.GetViewMatrix())); // remove translation from the view matrix
        SkyboxShader.setMat4("view", View);
        SkyboxShader.setMat4("projection", Projection);
 
        glBindVertexArray(SkyboxVAO);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_CUBE_MAP, CubemapTexture);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);
        glDepthFunc(GL_LESS);

        glfwSwapBuffers(pWindow);
        glfwPollEvents();
    }
    glDeleteVertexArrays(1, &CubeVAO);
    glDeleteVertexArrays(1, &SkyboxVAO);
    glDeleteBuffers(1, &CubeVBO);
    glDeleteBuffers(1, &SkyboxVBO);
    glfwDestroyWindow(pWindow);
    glfwTerminate();
    return 0;
}

void processInput(GLFWwindow* vWindow)
{
    if (glfwGetKey(vWindow, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(vWindow, true);

    float CameraSpeed = static_cast<float>(2.5 * DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_W) == GLFW_PRESS)
        Camera.ProcessKeyboard(FORWARD, DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_S) == GLFW_PRESS)
        Camera.ProcessKeyboard(BACKWARD, DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_A) == GLFW_PRESS)
        Camera.ProcessKeyboard(LEFT, DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_D) == GLFW_PRESS)
        Camera.ProcessKeyboard(RIGHT, DeltaTime);
}

void framebufferSizeCallback(GLFWwindow* vWindow, int vWidth, int vHeight)
{
    glViewport(0, 0, vWidth, vHeight);
}

void mouseCallback(GLFWwindow* vWindow, double vPosX, double vPosY)
{
    float PosX = static_cast<float>(vPosX);
    float PosY = static_cast<float>(vPosY);

    if (FirstMouse)
    {
        LastX = PosX;
        LastY = PosY;
        FirstMouse = false;
    }

    float OffsetX = PosX - LastX;
    float OffsetY = LastY - PosY; // reversed since y-coordinates go from bottom to top
    LastX = PosX;
    LastY = PosY;

    Camera.ProcessMouseMovement(OffsetX, OffsetY);
}

void scrollCallback(GLFWwindow* vWindow, double vOffsetX, double vOffsetY)
{
    Camera.ProcessMouseScroll(static_cast<float>(vOffsetY));
}

unsigned int loadTexture(char const* vPath)
{
    unsigned int TextureID = 0;
    int Width, Height, NrComponents;
    unsigned char* pData = stbi_load(vPath, &Width, &Height, &NrComponents, 0);
    if (pData)
    {
        GLenum Format = GL_RGB;
        if (NrComponents == 1)
            Format = GL_RED;
        else if (NrComponents == 3)
            Format = GL_RGB;
        else if (NrComponents == 4)
            Format = GL_RGBA;

        /*glGenTextures(1, &TextureID);
        glBindTexture(GL_TEXTURE_2D, TextureID);
        glTexImage2D(GL_TEXTURE_2D, 0, Format, Width, Height, 0, Format, GL_UNSIGNED_BYTE, pData);
        glGenerateMipmap(GL_TEXTURE_2D);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);*/

        glCreateTextures(GL_TEXTURE_2D, 1, &TextureID);
        glTextureParameteri(TextureID, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTextureParameteri(TextureID, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTextureParameteri(TextureID, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTextureParameteri(TextureID, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTextureStorage2D(TextureID, 1, GL_RGB8, Width, Height);
        glTextureSubImage2D(TextureID, 0, 0, 0, Width, Height, Format, GL_UNSIGNED_BYTE, pData);
        glGenerateTextureMipmap(TextureID);
        stbi_image_free(pData);
    }
    else
    {
        std::cout << "Texture failed to load at path: " << vPath << std::endl;
        stbi_image_free(pData);
    }
    return TextureID;
}

unsigned int loadCubemap(std::vector<std::string> vFaces)
{
    unsigned int TextureID = 0;
    /*glGenTextures(1, &TextureID);
    glBindTexture(GL_TEXTURE_CUBE_MAP, TextureID);*/
    glCreateTextures(GL_TEXTURE_CUBE_MAP, 1, &TextureID);
    int Width, Height, NrChannels;
    for (unsigned int i = 0; i < vFaces.size(); i++)
    {
        unsigned char* pData = stbi_load(vFaces[i].c_str(), &Width, &Height, &NrChannels, 0);
        if (pData)
        {
            //glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGB, Width, Height, 0, GL_RGB, GL_UNSIGNED_BYTE, pData);
            glTextureStorage2D(TextureID, 1, GL_RGB8, Width, Height);
            glTextureSubImage3D(TextureID, 0, 0, 0, i, Width, Height, 1, GL_RGB, GL_UNSIGNED_BYTE, pData);
            stbi_image_free(pData);
        }
        else
        {
            std::cout << "Cubemap texture failed to load at path: " << vFaces[i] << std::endl;
            stbi_image_free(pData);
        }
    }
    /*glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);*/

    glTextureParameteri(TextureID, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTextureParameteri(TextureID, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTextureParameteri(TextureID, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    glTextureParameteri(TextureID, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTextureParameteri(TextureID, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    return TextureID;
}

bool loadGLTF(const std::string& vFilename, tinygltf::Model& vModelGLTF)
{
    tinygltf::TinyGLTF Loader;
    std::string Err;
    std::string Warn;

    bool Res = Loader.LoadASCIIFromFile(&vModelGLTF, &Err, &Warn, vFilename);

    if (!Warn.empty()) 
    {
        std::cout << "WARN : " << Warn;
    }

    if (!Err.empty()) 
    {
        std::cout << "ERR : " << Err;
    }

    if (!Res) 
    {
        std::cout << "Failed to load glTF : " << vFilename << std::endl;
    }
    else 
    {
        std::cout << "Loaded glTF : " << vFilename << std::endl;
    }

    return Res;
}

void createIndiceBufferData(std::vector<unsigned int>& vIndices, const tinygltf::BufferView& vBufferView, const tinygltf::Buffer& vBuffer, const int& vComponentType)
{
    unsigned short TempUShortIndice;
    unsigned int   TempUIntIndice;
    const int UnShortByte = 2;
    const int UnIntByte = 4;
    if (vComponentType == TINYGLTF_COMPONETTYPE_UNSHORT)
    {
        for (size_t i = vBufferView.byteOffset; i < vBufferView.byteOffset + vBufferView.byteLength; i += UnShortByte) 
        {
            std::memcpy(&TempUShortIndice, &vBuffer.data.at(i), sizeof(unsigned short));
            vIndices.push_back(TempUShortIndice);
        }
    }
    else if (vComponentType == TINYGLTF_COMPONETTYPE_UNINT)
    {
        for (size_t i = vBufferView.byteOffset; i < vBufferView.byteOffset + vBufferView.byteLength; i += UnIntByte) 
        {
            std::memcpy(&TempUIntIndice, &vBuffer.data.at(i), sizeof(unsigned int));
            vIndices.push_back(TempUIntIndice);
        }
    }
}

void createVertexBufferData(std::vector<float>& vVertices, const tinygltf::Buffer& vBuffer, const int vIndex) 
{
    float TempVertice;
    const int FloatByte = 4;
    const int FloatNum = 3;
    for (auto i = vIndex; i < vIndex + FloatNum * FloatByte; i += FloatByte)
    {
        std::memcpy(&TempVertice, &vBuffer.data.at(i), sizeof(float));
        vVertices.push_back(TempVertice);
    }
}

void createVerticeAndIndice(tinygltf::Model& vGLTFModel, std::vector<float>& vioVertices, std::vector<unsigned int>& vioIndices)
{
    for (auto& Node : vGLTFModel.nodes)
    {
        if (Node.mesh == -1) continue;
        const auto& Mesh = vGLTFModel.meshes[Node.mesh];
        std::string MeshName = Mesh.name;
        std::cout << "MeshName : " << MeshName << std::endl;

        for (auto& Primitive : Mesh.primitives)
        {
            vioVertices.clear();
            if (Primitive.mode == TINYGLTF_MODE_POINT)
            {
                const tinygltf::Accessor& AccessorPos = vGLTFModel.accessors[Primitive.attributes.at("POSITION")];
                const tinygltf::BufferView& BufferViewPos = vGLTFModel.bufferViews[AccessorPos.bufferView];
                const tinygltf::Buffer& BufferPos = vGLTFModel.buffers[BufferViewPos.buffer];
                const tinygltf::Accessor& AccessorColor = vGLTFModel.accessors[Primitive.attributes.at("COLOR_0")];
                const tinygltf::BufferView& BufferViewColor = vGLTFModel.bufferViews[AccessorColor.bufferView];
                const tinygltf::Buffer& BufferColor = vGLTFModel.buffers[BufferViewColor.buffer];
                glm::vec3 MinPos(AccessorPos.minValues[0], AccessorPos.minValues[1], AccessorPos.minValues[2]);
                glm::vec3 MaxPos(AccessorPos.maxValues[0], AccessorPos.maxValues[1], AccessorPos.maxValues[2]);

                const int Vec3Byte = 12;
                for (size_t i = BufferViewPos.byteOffset, k = BufferViewColor.byteOffset;
                    (i < BufferViewPos.byteOffset + BufferViewPos.byteLength && k < BufferViewColor.byteOffset + BufferViewColor.byteLength);
                    i += Vec3Byte, k += Vec3Byte)
                {
                    createVertexBufferData(vioVertices, BufferPos, (int)i);
                    createVertexBufferData(vioVertices, BufferColor, (int)k);
                }

                std::cout << "Vertices.size : " << vioVertices.size() << std::endl;
                assert(vioVertices.size() == vGLTFModel.accessors[Primitive.attributes.at("POSITION")].count * 3 * 2);
            }
            else if (Primitive.mode == TINYGLTF_MODE_TRIANGLE || Primitive.mode == TINYGLTF_MODE_DEFAULT)
            {
                vioVertices.clear();
                vioIndices.clear();
                const tinygltf::BufferView& BufferViewIndice = vGLTFModel.bufferViews[vGLTFModel.accessors[Primitive.indices].bufferView];
                const tinygltf::Buffer& BufferIndice = vGLTFModel.buffers[BufferViewIndice.buffer];
                const int IndiceComponentType = vGLTFModel.accessors[Primitive.indices].componentType;

                createIndiceBufferData(vioIndices, BufferViewIndice, BufferIndice, IndiceComponentType);
                std::cout << "indice.size : " << vioIndices.size() << std::endl;
                assert(vioIndices.size() == vGLTFModel.accessors[Primitive.indices].count);

                const tinygltf::BufferView& BufferViewPos = vGLTFModel.bufferViews[vGLTFModel.accessors[Primitive.attributes.at("POSITION")].bufferView];
                const tinygltf::Buffer& BufferPos = vGLTFModel.buffers[BufferViewPos.buffer];
                const tinygltf::BufferView& BufferViewNor = vGLTFModel.bufferViews[vGLTFModel.accessors[Primitive.attributes.at("NORMAL")].bufferView];
                const tinygltf::Buffer& BufferNor = vGLTFModel.buffers[BufferViewNor.buffer];

                assert(BufferViewPos.byteLength == BufferViewNor.byteLength);

                const int Vec3Byte = 12;
                for (std::size_t i = BufferViewPos.byteOffset, k = BufferViewNor.byteOffset;
                    (i < BufferViewPos.byteOffset + BufferViewPos.byteLength && k < BufferViewNor.byteOffset + BufferViewNor.byteLength);
                    i += Vec3Byte, k += Vec3Byte)
                {
                    createVertexBufferData(vioVertices, BufferPos, (int)i);
                    createVertexBufferData(vioVertices, BufferNor, (int)k);
                }
                std::cout << "Vertices.size : " << vioVertices.size() << std::endl;
                assert(vioVertices.size() == vGLTFModel.accessors[Primitive.attributes.at("POSITION")].count * 6);
            }
        }
    }
    return;
}