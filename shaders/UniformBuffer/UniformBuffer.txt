#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <iostream>
#include "shader.h"
#include "camera.h"

// 窗口大小
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);
void RenderQuad(CShader& vShader);
void RenderScene(CShader& vShader);

int main()
{
    // 初始化GLFW
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    // 创建窗口
    GLFWwindow* pWindow = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Deferred Rendering", NULL, NULL);
    if (pWindow == NULL)
    {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(pWindow);
    glfwSetFramebufferSizeCallback(pWindow, framebuffer_size_callback);

    // 初始化GLAD
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cerr << "Failed to initialize GLAD" << std::endl;
        return -1;
    }
    
    float CubeVertices[] = {
        // positions         
        -0.5f, -0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f,  0.5f, -0.5f,
         0.5f,  0.5f, -0.5f,
        -0.5f,  0.5f, -0.5f,
        -0.5f, -0.5f, -0.5f,

        -0.5f, -0.5f,  0.5f,
         0.5f, -0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f,  0.5f,
        -0.5f, -0.5f,  0.5f,

        -0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f, -0.5f,
        -0.5f, -0.5f, -0.5f,
        -0.5f, -0.5f, -0.5f,
        -0.5f, -0.5f,  0.5f,
        -0.5f,  0.5f,  0.5f,

         0.5f,  0.5f,  0.5f,
         0.5f,  0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f, -0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,

        -0.5f, -0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f, -0.5f,  0.5f,
         0.5f, -0.5f,  0.5f,
        -0.5f, -0.5f,  0.5f,
        -0.5f, -0.5f, -0.5f,

        -0.5f,  0.5f, -0.5f,
         0.5f,  0.5f, -0.5f,
         0.5f,  0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f, -0.5f,
    };

    // cube VAO
    unsigned int CubeVAO, CubeVBO;
    glCreateVertexArrays(1, &CubeVAO);
    glCreateBuffers(1, &CubeVBO);
    glNamedBufferData(CubeVBO, sizeof(CubeVertices), &CubeVertices, GL_STATIC_DRAW);
    glVertexArrayVertexBuffer(CubeVAO, 0, CubeVBO, 0, 3 * sizeof(float));
    glEnableVertexArrayAttrib(CubeVAO, 0);
    glVertexArrayAttribFormat(CubeVAO, 0, 3, GL_FLOAT, GL_FALSE, (0 * sizeof(float)));
    glVertexArrayAttribBinding(CubeVAO, 0, 0);

    CShader ShaderRed("./shaders/uniformbuffer.vs", "./shaders/uniformbufferRed.fs");
    CShader ShaderGreen("./shaders/uniformbuffer.vs", "./shaders/uniformbufferGreen.fs");
    CShader ShaderBlue("./shaders/uniformbuffer.vs", "./shaders/uniformbufferBlue.fs");

    // configure a uniform buffer object
    // ---------------------------------
    // first. We get the relevant block indices
    unsigned int uniformBlockIndexRed = glGetUniformBlockIndex(ShaderRed.ID, "Matrices");
    unsigned int uniformBlockIndexGreen = glGetUniformBlockIndex(ShaderGreen.ID, "Matrices");
    unsigned int uniformBlockIndexBlue = glGetUniformBlockIndex(ShaderBlue.ID, "Matrices");
    // then we link each shader's uniform block to this uniform binding point
    glUniformBlockBinding(ShaderRed.ID, uniformBlockIndexRed, 0);
    glUniformBlockBinding(ShaderGreen.ID, uniformBlockIndexGreen, 0);
    glUniformBlockBinding(ShaderBlue.ID, uniformBlockIndexBlue, 0);
    // Now actually create the buffer
    unsigned int uboMatrices;
    glGenBuffers(1, &uboMatrices);
    glBindBuffer(GL_UNIFORM_BUFFER, uboMatrices);
    glBufferData(GL_UNIFORM_BUFFER, 2 * sizeof(glm::mat4), NULL, GL_STATIC_DRAW);
    glBindBuffer(GL_UNIFORM_BUFFER, 0);
    // define the range of the buffer that links to a uniform binding point
    glBindBufferRange(GL_UNIFORM_BUFFER, 0, uboMatrices, 0, 2 * sizeof(glm::mat4));

    // store the projection matrix (we only do this once now) (note: we're not using zoom anymore by changing the FoV)
    glm::mat4 projection = glm::perspective(45.0f, (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
    glBindBuffer(GL_UNIFORM_BUFFER, uboMatrices);
    glBufferSubData(GL_UNIFORM_BUFFER, 0, sizeof(glm::mat4), glm::value_ptr(projection));
    glBindBuffer(GL_UNIFORM_BUFFER, 0);

    // camera
    CCamera Camera(glm::vec3(0.0f, 0.0f, 3.0f));
    float LastX = (float)SCR_WIDTH / 2.0;
    float LastY = (float)SCR_HEIGHT / 2.0;
    bool FirstMouse = true;

    // timing
    float DeltaTime = 0.0f;
    float LastFrame = 0.0f;

    // 主循环
    while (!glfwWindowShouldClose(pWindow))
    {
        // 输入处理
        float CurrentFrame = static_cast<float>(glfwGetTime());
        DeltaTime = CurrentFrame - LastFrame;
        LastFrame = CurrentFrame;
        processInput(pWindow);

        // 几何处理阶段
        glEnable(GL_DEPTH_TEST);
        glViewport(0, 0, SCR_WIDTH, SCR_HEIGHT);
        glClearColor(0.3f, 0.3f, 0.3f, 0.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        
        // set the view and projection matrix in the uniform block - we only have to do this once per loop iteration.
        glm::mat4 view = Camera.GetViewMatrix();
        glBindBuffer(GL_UNIFORM_BUFFER, uboMatrices);
        glBufferSubData(GL_UNIFORM_BUFFER, sizeof(glm::mat4), sizeof(glm::mat4), glm::value_ptr(view));
        glBindBuffer(GL_UNIFORM_BUFFER, 0);

        // draw 4 cubes 
        // RED
        glBindVertexArray(CubeVAO);
        ShaderRed.use();
        glm::mat4 model = glm::mat4(1.0f);
        model = glm::translate(model, glm::vec3(-0.75f, 0.75f, 0.0f)); // move top-left
        ShaderRed.setMat4("model", model);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        // GREEN
        ShaderGreen.use();
        model = glm::mat4(1.0f);
        model = glm::translate(model, glm::vec3(0.75f, 0.75f, 0.0f)); // move top-right
        ShaderGreen.setMat4("model", model);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        // BLUE
        ShaderBlue.use();
        model = glm::mat4(1.0f);
        model = glm::translate(model, glm::vec3(0.75f, -0.75f, 0.0f)); // move bottom-right
        ShaderBlue.setMat4("model", model);
        glDrawArrays(GL_TRIANGLES, 0, 36);

        glfwSwapBuffers(pWindow);
        glfwPollEvents();
    }

    // 清理资源
    glDeleteFramebuffers(1, &CubeVAO);
    glDeleteBuffers(1, &CubeVBO);

    glfwTerminate();
    return 0;
}

// 处理输入
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

// 当窗口大小改变时调用
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

// 渲染覆盖屏幕的四边形
unsigned int quadVAO = 0;
unsigned int quadVBO, quadEBO;
void RenderQuad(CShader& vShader)
{
    if (quadVAO == 0)
    {
        GLfloat vertices[] =
        {
            -1.0f, -1.0f , 0.0f, 0.0f, 0.0f,
            -1.0f,  1.0f , 0.0f, 0.0f, 1.0f,
             1.0f,  1.0f , 0.0f, 1.0f, 1.0f,
             1.0f, -1.0f , 0.0f, 1.0f, 0.0f,
        };

        GLuint indices[] =
        {
            0, 2, 1,
            0, 3, 2
        };
        glCreateVertexArrays(1, &quadVAO);
        glCreateBuffers(1, &quadVBO);
        glCreateBuffers(1, &quadEBO);

        glNamedBufferData(quadVBO, sizeof(vertices), vertices, GL_STATIC_DRAW);
        glNamedBufferData(quadEBO, sizeof(indices), indices, GL_STATIC_DRAW);

        glEnableVertexArrayAttrib(quadVAO, 0);
        glVertexArrayAttribBinding(quadVAO, 0, 0);
        glVertexArrayAttribFormat(quadVAO, 0, 3, GL_FLOAT, GL_FALSE, 0);

        glEnableVertexArrayAttrib(quadVAO, 1);
        glVertexArrayAttribBinding(quadVAO, 1, 0);
        glVertexArrayAttribFormat(quadVAO, 1, 2, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat));

        glVertexArrayVertexBuffer(quadVAO, 0, quadVBO, 0, 5 * sizeof(GLfloat));
        glVertexArrayElementBuffer(quadVAO, quadEBO);
    }
    glBindVertexArray(quadVAO);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
    glBindVertexArray(0);
}

unsigned int TriangleVAO = 0;
unsigned int TriangleVBO;
void RenderScene(CShader& vShader)
{
    if (TriangleVAO == 0)
    {
        float vertices[] = {
            // 位置           // 法线
            0.0f,  0.5f, 0.0f,  0.0f,  0.0f,  1.0f,
           -0.5f, -0.5f, 0.0f,  0.0f,  0.0f,  1.0f,
            0.5f, -0.5f, 0.0f,  0.0f,  0.0f,  1.0f,
        };

        glGenVertexArrays(1, &TriangleVAO);
        glBindVertexArray(TriangleVAO);

        glGenBuffers(1, &TriangleVBO);
        glBindBuffer(GL_ARRAY_BUFFER, TriangleVBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

        // Position attribute
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(0);
        // Normal attribute
        glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
        glEnableVertexAttribArray(1);
    }

    glm::vec3 CameraPos = glm::vec3(0.0f, 0.0f, -2.0f);
    glm::vec3 CameraFront = glm::vec3(0.0f, 0.0f, 1.0f);
    glm::vec3 CameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
    glm::mat4 ProjectionMat = glm::perspective(glm::radians(45.0f), (GLfloat)SCR_WIDTH / (GLfloat)SCR_HEIGHT, 0.1f, 100.0f);
    glm::mat4 ViewMat = glm::lookAt(CameraPos, CameraPos + CameraFront, CameraUp);
    vShader.setMat4("projection", ProjectionMat);
    vShader.setMat4("view", ViewMat);
    glm::mat4 Model = glm::mat4(1.0f);
    vShader.setMat4("model", Model);

    glBindVertexArray(TriangleVAO);
    glDrawArrays(GL_TRIANGLES, 0, 3);
    glBindVertexArray(0);
}