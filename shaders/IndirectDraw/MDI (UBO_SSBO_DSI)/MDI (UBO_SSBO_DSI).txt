/*
  reference : https://ktstephano.github.io/rendering/opengl/mdi
*/

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <vector>
#include "DragonGLTFModel.h"
#include "camera.h"
#include "shader.h"

struct SDrawArraysIndirectCommand {
    GLuint _Count;
    GLuint _InstanceCount;
    GLuint _FirstIndex;
    GLuint _BaseVertex;
    GLuint _BaseInstance;
};

CCamera Camera(glm::vec3(0.0f, 0.0f, 30.0f));
float DeltaTime = 0.0f;
float LastFrame = 0.0f;
bool FirstMouse = true;
float Yaw = -90.0f;
float Pitch = 0.0f;
float LastX = 800.0f / 2.0;
float LastY = 600.0 / 2.0;
float Fov = 45.0f;

void framebufferSizeCallback(GLFWwindow* vWindow, int vWidth, int vHeight)
{
    glViewport(0, 0, vWidth, vHeight);
}

void processInput(GLFWwindow* vWindow)
{
    if (glfwGetKey(vWindow, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(vWindow, true);

    float CameraSpeed = static_cast<float>(2.5 * DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_W) == GLFW_PRESS)
        Camera.ProcessKeyboard(FORWARD, DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_S) == GLFW_PRESS)
        Camera.ProcessKeyboard(BACKWARD, DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_A) == GLFW_PRESS)
        Camera.ProcessKeyboard(LEFT, DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_D) == GLFW_PRESS)
        Camera.ProcessKeyboard(RIGHT, DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_SPACE) == GLFW_PRESS)
        Camera.ProcessKeyboard(UP, DeltaTime);
    if (glfwGetKey(vWindow, GLFW_KEY_LEFT_CONTROL) == GLFW_PRESS)
        Camera.ProcessKeyboard(DONE, DeltaTime);
}

void mouseCallback(GLFWwindow* vWindow, double vPosX, double vPosY)
{
    float PosX = static_cast<float>(vPosX);
    float PosY = static_cast<float>(vPosY);

    if (FirstMouse)
    {
        LastX = PosX;
        LastY = PosY;
        FirstMouse = false;
    }

    float OffsetX = PosX - LastX;
    float OffsetY = LastY - PosY; // reversed since y-coordinates go from bottom to top
    LastX = PosX;
    LastY = PosY;

    Camera.ProcessMouseMovement(OffsetX, OffsetY);
}

void scrollCallback(GLFWwindow* vWindow, double vOffsetX, double vOffsetY)
{
    Camera.ProcessMouseScroll(static_cast<float>(vOffsetY));
}

int main() {
    if (!glfwInit()) return -1;

    GLFWwindow* pWindow = glfwCreateWindow(800, 600, "OpenGL IndirectDraw Demo", NULL, NULL);
    if (!pWindow)
    {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(pWindow);
    glfwSetCursorPosCallback(pWindow, mouseCallback);
    glfwSetScrollCallback(pWindow, scrollCallback);
    glfwSetInputMode(pWindow, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) return -1;

    int WindowWidth, WindowHeight;
    glfwGetFramebufferSize(pWindow, &WindowWidth, &WindowHeight);
    glViewport(0, 0, WindowWidth, WindowHeight);
    glfwSetFramebufferSizeCallback(pWindow, framebufferSizeCallback);

    std::vector<float> TriangleVertices = {
         0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 1.0f,
        -0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 1.0f,
        -0.5f,  0.5f, 0.0f,   0.0f, 1.0f, 1.0f
    };

    std::vector<unsigned int> TriangleIndices = {
        0, 1, 2
    };

    std::vector<float> CubeVertices = {
        -0.5f, -0.5f, -0.5f,  0.0f, 0.0f, -1.0f,
         0.5f, -0.5f, -0.5f,  0.0f, 0.0f, -1.0f,
         0.5f,  0.5f, -0.5f,  0.0f, 0.0f, -1.0f,
        -0.5f,  0.5f, -0.5f,  0.0f, 0.0f, -1.0f,

        -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,  1.0f,
         0.5f, -0.5f,  0.5f,  0.0f, 0.0f,  1.0f,
         0.5f,  0.5f,  0.5f,  0.0f, 0.0f,  1.0f,
        -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,  1.0f,

        -0.5f, -0.5f, -0.5f,  -1.0f, 0.0f, 0.0f,
        -0.5f, -0.5f,  0.5f,  -1.0f, 0.0f, 0.0f,
        -0.5f,  0.5f,  0.5f,  -1.0f, 0.0f, 0.0f,
        -0.5f,  0.5f, -0.5f,  -1.0f, 0.0f, 0.0f,

         0.5f, -0.5f, -0.5f,  1.0f, 0.0f, 0.0f,
         0.5f, -0.5f,  0.5f,  1.0f, 0.0f, 0.0f,
         0.5f,  0.5f,  0.5f,  1.0f, 0.0f, 0.0f,
         0.5f,  0.5f, -0.5f,  1.0f, 0.0f, 0.0f,

        -0.5f,  0.5f,  0.5f,  0.0f, 1.0f, 0.0f,
         0.5f,  0.5f,  0.5f,  0.0f, 1.0f, 0.0f,
         0.5f,  0.5f, -0.5f,  0.0f, 1.0f, 0.0f,
        -0.5f,  0.5f, -0.5f,  0.0f, 1.0f, 0.0f,

        -0.5f, -0.5f, -0.5f,  0.0f, -1.0f, 0.0f,
         0.5f, -0.5f, -0.5f,  0.0f, -1.0f, 0.0f,
         0.5f, -0.5f,  0.5f,  0.0f, -1.0f, 0.0f,
        -0.5f, -0.5f,  0.5f,  0.0f, -1.0f, 0.0f
    };

    std::vector<unsigned int> CubeIndices = {
        0, 1, 2,
        0, 2, 3,

        4, 5, 6,
        4, 6, 7,

        8, 9, 10,
        8, 10, 11,

        12, 13, 14,
        12, 14, 15,

        16, 17, 18,
        16, 18, 19,

        20, 21, 22,
        20, 22, 23
    };

    CDragonGLTFModel DragonGLTFModel("./models/dragon.gltf");
    DragonGLTFModel.initModel();
    std::vector<float>        DragonVertices = DragonGLTFModel.getVerticesVector();
    std::vector<unsigned int> DragonIndices  = DragonGLTFModel.getIndicesVector();

    const int DrawNum = 3;
    std::vector<float>        TotalVertieces;
    std::vector<unsigned int> TotalIndices;
    std::vector<std::vector<float>>        VertexData;
    std::vector<std::vector<unsigned int>> IndexData;

    VertexData.push_back(CubeVertices);
    VertexData.push_back(TriangleVertices);
    VertexData.push_back(DragonVertices);
    IndexData.push_back(CubeIndices);
    IndexData.push_back(TriangleIndices);
    IndexData.push_back(DragonIndices);
    
   for(size_t i = 0; i < DrawNum; i++)
   {
       TotalVertieces.insert(TotalVertieces.end(), VertexData[i].begin(), VertexData[i].end());
       TotalIndices.insert(TotalIndices.end(), IndexData[i].begin(), IndexData[i].end());
   }

    unsigned int TotalVAO, TotalVBO, TotalEBO;
    glCreateVertexArrays(1, &TotalVAO);
    glCreateBuffers(1, &TotalVBO);
    glNamedBufferStorage(TotalVBO, TotalVertieces.size() * sizeof(float), TotalVertieces.data(), GL_DYNAMIC_STORAGE_BIT);
    glCreateBuffers(1, &TotalEBO);
    glNamedBufferStorage(TotalEBO, TotalIndices.size() * sizeof(float), TotalIndices.data(), GL_DYNAMIC_STORAGE_BIT);
    glVertexArrayVertexBuffer(TotalVAO, 0, TotalVBO, 0, 6 * sizeof(float));
    glVertexArrayElementBuffer(TotalVAO, TotalEBO);
    glEnableVertexArrayAttrib(TotalVAO, 0);
    glEnableVertexArrayAttrib(TotalVAO, 1);
    glVertexArrayAttribFormat(TotalVAO, 0, 3, GL_FLOAT, GL_FALSE, 0 * sizeof(float));
    glVertexArrayAttribFormat(TotalVAO, 1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float));
    glVertexArrayAttribBinding(TotalVAO, 0, 0);
    glVertexArrayAttribBinding(TotalVAO, 1, 0);

    const int PerVetexDataNumFloat = 6;
    int FirstIndex = 0, BaseVertex = 0;
    SDrawArraysIndirectCommand DrawCommand[DrawNum];
    for (size_t i = 0; i < DrawNum; i++)
    {
        DrawCommand[i]._Count = IndexData[i].size();
        DrawCommand[i]._InstanceCount = 1;
        DrawCommand[i]._FirstIndex = FirstIndex;
        DrawCommand[i]._BaseVertex = BaseVertex;
        DrawCommand[i]._BaseInstance = 0;
        FirstIndex += IndexData[i].size();
        BaseVertex += VertexData[i].size() / PerVetexDataNumFloat;
    }

    std::vector<glm::mat4> AllModels;
    const glm::mat4 TriangleModel = glm::translate(glm::mat4(1.0f), glm::vec3(-5.0f, 0.0f, 0.0f));
    const glm::mat4 CubeModel     = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f));
    const glm::mat4 DragonModel   = glm::translate(glm::rotate(glm::mat4(1.0f), glm::radians(90.0f), glm::vec3(1.0f, 0.0f, 0.0f)), glm::vec3(0.0f, 0.0f, -3.0f));
    AllModels.push_back(TriangleModel);
    AllModels.push_back(CubeModel);
    AllModels.push_back(DragonModel);

    CShader TotalShader("./shaders/MultiDrawIndirect.vert", "shaders/MultiDrawIndirect.frag");

    const int TotalShaderStorageBinding = 0;
    GLuint ModelsSSBO;
    glCreateBuffers(1, &ModelsSSBO);
    glNamedBufferStorage(ModelsSSBO, static_cast<GLsizeiptr>(sizeof(glm::mat4)* AllModels.size()), AllModels.data(), GL_DYNAMIC_STORAGE_BIT);
    glBindBufferBase(GL_SHADER_STORAGE_BUFFER, TotalShaderStorageBinding, ModelsSSBO);

    // for every vertex shader, set uniform block binding.
    const int TotalUniformBlockBinding = 1;
    unsigned int UniformBlockIndex = glGetUniformBlockIndex(TotalShader.ID, "Matrices");
    TotalShader.setBlockBinding(UniformBlockIndex, TotalUniformBlockBinding); // glUniformBlockBinding(ID, vUniformBlockIndex, vBindingIndex);

    GLuint UBOMatrices;
    glCreateBuffers(1, &UBOMatrices);
    glNamedBufferStorage(UBOMatrices, 2 * sizeof(glm::mat4), NULL, GL_DYNAMIC_STORAGE_BIT);
    glBindBuffer(GL_UNIFORM_BUFFER, UBOMatrices);
    glBindBufferRange(GL_UNIFORM_BUFFER, TotalUniformBlockBinding, UBOMatrices, 0, 2 * sizeof(glm::mat4));

    const int SCR_WIDTH = 800;
    const int SCR_HEIGHT = 600;
    glBindBuffer(GL_UNIFORM_BUFFER, UBOMatrices);
    glm::mat4 Projection = glm::perspective(glm::radians(Camera.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
    glBufferSubData(GL_UNIFORM_BUFFER, 0, sizeof(glm::mat4), glm::value_ptr(Projection));
    glBindBuffer(GL_UNIFORM_BUFFER, 0);

    GLuint IndirectBuffer;
    glCreateBuffers(1, &IndirectBuffer);
    glNamedBufferStorage(IndirectBuffer, sizeof(SDrawArraysIndirectCommand) * DrawNum, DrawCommand, GL_DYNAMIC_STORAGE_BIT);
    glBindBuffer(GL_DRAW_INDIRECT_BUFFER, IndirectBuffer);

    while (!glfwWindowShouldClose(pWindow))
    {
        float CurrentFrame = static_cast<float>(glfwGetTime());
        DeltaTime = CurrentFrame - LastFrame;
        LastFrame = CurrentFrame;
        processInput(pWindow);

        glBindBuffer(GL_UNIFORM_BUFFER, UBOMatrices);
        glm::mat4 View = Camera.GetViewMatrix();
        glBufferSubData(GL_UNIFORM_BUFFER, sizeof(glm::mat4), sizeof(glm::mat4), glm::value_ptr(View));
        glBindBuffer(GL_UNIFORM_BUFFER, 0);

        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glEnable(GL_DEPTH_TEST);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glClearColor(0.1f, 0.2f, 0.1f, 1.0f);
        TotalShader.use();
        
        glBindVertexArray(TotalVAO);
        glMultiDrawElementsIndirect(GL_TRIANGLES, GL_UNSIGNED_INT, nullptr, DrawNum, 0);

        glfwSwapBuffers(pWindow);
        glfwPollEvents();
    }

    glDeleteVertexArrays(1, &TotalVAO);
    glDeleteBuffers(1, &TotalVBO);
    glDeleteBuffers(1, &TotalEBO);
    glDeleteBuffers(1, &ModelsSSBO);
    glDeleteBuffers(1, &UBOMatrices);
    glDeleteBuffers(1, &IndirectBuffer);
    glfwTerminate();
    return 0;
}