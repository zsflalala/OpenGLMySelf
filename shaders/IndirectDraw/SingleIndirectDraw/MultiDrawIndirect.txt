/*
  reference : https://ktstephano.github.io/rendering/opengl/mdi
*/

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <vector>

struct SDrawArraysIndirectCommand {
    GLuint _Count;
    GLuint _InstanceCount;
    GLuint _FirstIndex;
    GLuint _BaseVertex;
    GLuint _BaseInstance;
};

void framebufferSizeCallback(GLFWwindow* vWindow, int vWidth, int vHeight)
{
    glViewport(0, 0, vWidth, vHeight);
}

int main() {
    if (!glfwInit()) return -1;

    GLFWwindow* pWindow = glfwCreateWindow(800, 600, "OpenGL IndirectDraw Demo", NULL, NULL);
    if (!pWindow)
    {
        glfwTerminate();
        return -1;
    }

    glfwMakeContextCurrent(pWindow);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) return -1;

    int WindowWidth, WindowHeight;
    glfwGetFramebufferSize(pWindow, &WindowWidth, &WindowHeight);
    glViewport(0, 0, WindowWidth, WindowHeight);
    glfwSetFramebufferSizeCallback(pWindow, framebufferSizeCallback);

    // 指定三角形的顶点数据
    std::vector<float> Vertices = {
         0.5f,  0.5f, 0.0f,
         0.5f, -0.5f, 0.0f,
        -0.5f, -0.5f, 0.0f,
        -0.5f,  0.5f, 0.0f,
        -0.7f,  0.7f, 0.0f,
         0.58f,  0.3f, 0.0f,
    };

    std::vector<unsigned int> Indices =
    {
        0, 1, 2,
        0, 1, 2
    };

    // 创建一个VAO用于管理顶点数据格式
    GLuint TriangleVAO;
    glGenVertexArrays(1, &TriangleVAO);
    glBindVertexArray(TriangleVAO);

    GLuint TriangleVBO, TriangleEBO;
    glGenBuffers(1, &TriangleVBO);
    glBindBuffer(GL_ARRAY_BUFFER, TriangleVBO);
    glBufferData(GL_ARRAY_BUFFER, Vertices.size() * sizeof(float), Vertices.data(), GL_STATIC_DRAW);
    glGenBuffers(1, &TriangleEBO);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TriangleEBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(unsigned int) * Indices.size(), Indices.data(), GL_STATIC_DRAW);

    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);

    // 创建indirect draw命令
    const int DrawNum = 2;
    SDrawArraysIndirectCommand DrawCommand[DrawNum];
    std::cout << sizeof(SDrawArraysIndirectCommand) * DrawNum << " " << sizeof(DrawCommand) << std::endl;
    DrawCommand[0]._Count = 3;           // 3 indices total
    DrawCommand[0]._InstanceCount = 1;
    DrawCommand[0]._FirstIndex = 0;      // Starts at location 0 in index array
    DrawCommand[0]._BaseVertex = 0;      // Starts at location 0 in vertices array
    DrawCommand[0]._BaseInstance = 0;
    DrawCommand[1]._Count = 3;
    DrawCommand[1]._InstanceCount = 1;
    DrawCommand[1]._FirstIndex = 3;
    DrawCommand[1]._BaseVertex = 3;
    DrawCommand[1]._BaseInstance = 0;

    // 创建indirect draw缓冲区
    GLuint IndirectBuffer;
    /*glGenBuffers(1, &IndirectBuffer);
    glBindBuffer(GL_DRAW_INDIRECT_BUFFER, IndirectBuffer);
    glBufferData(GL_DRAW_INDIRECT_BUFFER, sizeof(SDrawArraysIndirectCommand) * DrawNum, DrawCommand, GL_STATIC_DRAW);*/
    glCreateBuffers(1, &IndirectBuffer);
    glNamedBufferStorage(IndirectBuffer, sizeof(SDrawArraysIndirectCommand) * DrawNum, DrawCommand, GL_DYNAMIC_STORAGE_BIT);
    glBindBuffer(GL_DRAW_INDIRECT_BUFFER, IndirectBuffer);

    while (!glfwWindowShouldClose(pWindow))
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glClearColor(0.1f, 0.2f, 0.1f, 1.0f);
        glBindVertexArray(TriangleVAO);
        glMultiDrawElementsIndirect(GL_TRIANGLES, GL_UNSIGNED_INT, nullptr, DrawNum, 0);
        //glMultiDrawArraysIndirect(GL_TRIANGLES, DrawCommand, 2, 0);

        glfwSwapBuffers(pWindow);
        glfwPollEvents();
    }

    // 清理资源
    glDeleteVertexArrays(1, &TriangleVAO);
    glDeleteBuffers(1, &TriangleVBO);
    glDeleteBuffers(1, &TriangleEBO);
    glDeleteBuffers(1, &IndirectBuffer);

    glfwTerminate();
    return 0;
}